@model Triton.Operations.Models.QuotationViewModel
@using Microsoft.Extensions.Configuration
@{
    ViewData["Title"] = "View quote - " + Model.VendorQuoteModel.Quote.QuoteNo;
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Header"] = "View Quote - ";
    ViewData["HeaderBold"] = Model.VendorQuoteModel.Quote.QuoteNo;
    ViewData["Description"] = $"Created {Model.VendorQuoteModel.Quote.DateQuote.ToString("ddd, dd MMMM yyyy")}" + $"{ (Model.VendorQuoteModel.Quote.QuoteExpiryDateStamp.HasValue ? $", expires {Model.VendorQuoteModel.Quote.QuoteExpiryDateStamp.Value.ToString("ddd, dd MMMM yyyy")}" : "")}";
}

@inject IConfiguration Configuration
@{
    var template = $"{Configuration.GetSection("URL").GetSection("template").Value}";
}

@functions {

    private void RenderDeliveryInformation(string address, string text, string icon)
    {
        <div class="d-flex align-items-center">
            <div class="d-flex align-items-center mr-2">
                <span class="btn btn-icon btn-soft-danger rounded-circle">
                    <span class="btn-icon__inner"><i class="@icon"></i></span>
                </span>
                <div class="ml-3">
                    <h5 class="text-hover-primary mb-0">@(address == null ? "N/A" : address)</h5>
                    <span class="font-size-sm text-body">@text</span>
                </div>
            </div>
        </div>
    }
    private void RenderBlock(string label, string value, string icon, string color)
    {
        <div class="card card-frame transition-3d-hover mb-3">
            <!-- Card -->
            <div class="card-body">
                <div class="media">
                    <span class="btn btn-lg btn-icon btn-soft-@color rounded-circle mr-4">
                        <span class="fas @icon btn-icon__inner"></span>
                    </span>
                    <div class="media-body px-4">
                        <h4 class="h6 text-dark mb-1">@value</h4>
                        <small class="d-block text-muted">@label</small>
                    </div>
                </div>
            </div>
            <!-- End Card -->
        </div>
    }

    private void RenderDocuments(string label, string href, string id)
    {
        <li class="list-group-item py-3">
            <div class="media">
                <div class="mt-1 mr-3">
                    <div class="media align-items-center">
                        <div class="avatar avatar-sm avatar-soft-secondary avatar-circle mr-2">
                            <span class="avatar-initials">@label.Substring(0, 1)</span>
                        </div>
                    </div>
                </div>
                <div class="media-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <h5 class="mb-0">@label</h5>
                            <span class="d-block font-size-sm">Quotation</span>
                        </div>

                        <div class="col-auto">
                            <a class="btn btn-sm btn-soft-primary" href="@href" title="" target="_blank">
                                View <i class="tio-open-in-new ml-1"></i>
                            </a>
                        </div>
                    </div>
                    <!-- End Row -->
                </div>
            </div>
        </li>
    }

    private void RenderLabel(string label, string value, string icon)
    {
        <div class="d-flex align-items-start mb-4">
            <span class="btn btn-icon btn-soft-danger rounded-circle">
                <span class="btn-icon__inner"><i class="fad @icon"></i></span>
            </span>

            <div class="ml-3">
                <span class="d-block text-dark">@label</span>
                <small class="d-block text-secondary">@value</small>
            </div>
        </div>
    }

    private void DisableDocuments(string label)
    {
        <li class="list-group-item py-3">
            <div class="media">
                <div class="mt-1 mr-3">
                    <div class="media align-items-center">
                        <div class="avatar avatar-sm avatar-soft-secondary avatar-circle mr-2">
                            <span class="avatar-initials">@label.Substring(0, 1)</span>
                        </div>
                    </div>
                </div>
                <div class="media-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <h5 class="mb-0">@label</h5>
                            <span class="d-block font-size-sm">Waybill</span>
                        </div>

                        <div class="col-auto text-danger">
                            <span class="badge badge-soft-danger p-1">
                                <i class="fal fa-upload"></i> Awaiting upload
                            </span>
                        </div>
                    </div>
                    <!-- End Row -->
                </div>
            </div>
        </li>

    }
}


<main id="content" role="main" class="main">
    <div class="content container-fluid">
        <div class="page-header">
            <div class="row align-items-end">
                <div class="col-sm mb-2 mb-sm-0">
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb breadcrumb-no-gutter">
                            <li class="breadcrumb-item"><a class="breadcrumb-link" href="javascript:;">Quotation</a></li>
                            <li class="breadcrumb-item"><a class="breadcrumb-link" href="javascript:;">Overview</a></li>
                        </ol>
                    </nav>

                    <h1 class="page-header-title">Quotation - @Model.VendorQuoteModel.Quote.QuoteNo</h1>
                </div>
                <div class="col-sm-auto">
                    <a class="btn btn-sm btn-primary mr-2" href="" data-toggle="modal" data-target="#exampleModalCenter">
                        <i class="fal fa-paper-plane mr-1"></i> Send Proposal
                    </a>
                </div>
            </div>
            <!-- End Row -->
        </div>
        <div class="page-header">
            <div class="js-nav-scroller hs-nav-scroller-horizontal">
                <span class="hs-nav-scroller-arrow-prev" style="display: none;">
                    <a class="hs-nav-scroller-arrow-link" href="javascript:;">
                        <i class="tio-chevron-left"></i>
                    </a>
                </span>

                <span class="hs-nav-scroller-arrow-next" style="display: none;">
                    <a class="hs-nav-scroller-arrow-link" href="javascript:;">
                        <i class="tio-chevron-right"></i>
                    </a>
                </span>

                <ul class="nav nav-tabs page-header-tabs" id="projectsTab" role="tablist">
                    <li class="nav-item">
                        <a class="nav-link active" data-toggle="pill" href="#pills-one-example2" role="tab" aria-controls="pills-two-example2" aria-selected="true">Quotation</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" data-toggle="pill" href="#pills-two-example2" role="tab" aria-controls="pills-two-example2" aria-selected="false">Map</a>
                    </li>
                </ul>
            </div>

            <!-- End Nav -->
        </div>
        <!-- End Row -->


        <div class="tab-content">
            <div class="tab-pane fade pt-6 show active" id="pills-one-example2" role="tabpanel" aria-labelledby="pills-one-example2-tab">
                <div class="row">
                    <div class="col-lg-12 mb-5 mb-lg-0">
                        <!-- Card -->
                        <div class="card card-lg">
                            <!-- Body -->
                            <div class="card-body">
                                @if (ViewData["Message"] != null)
                                {
                                    <div>
                                        @Html.Raw(ViewData["Message"])
                                    </div>
                                }
                                <div class="embed-responsive embed-responsive-1by1">
                                    <iframe class="embed-responsive-item" src="@Url.Action("RenderQuotationAsPDF","Quotation",new { Model.quoteId})" style="width:100%"></iframe>
                                </div>

                            </div>
                            <!-- End Body -->
                        </div>
                        <!-- End Card -->
                    </div>
                </div>
            </div>
            <div class="tab-pane fade pt-6" id="pills-two-example2" role="tabpanel" aria-labelledby="pills-two-example2-tab">
                <div id="dvMap" style="width:100%; height:1000px">
                </div>
            </div>
        </div>
    </div>
    <!-- End Content -->
    <div id="exampleModalCenter" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog " role="document">
            <form method="post" asp-action="EmailQuote" asp-controller="Quotation" class="js-validate">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalCenterTitle">Email proposal</h5>
                        <button type="button" class="btn btn-xs btn-icon btn-ghost-secondary" data-dismiss="modal" aria-label="Close">
                            <i class="tio-clear tio-lg"></i>
                        </button>
                    </div>
                    <div class="modal-body">
                        <!-- Form Group -->
                        <div class="row form-group">
                            <label for="txtEmail" class="col-sm-3 col-form-label input-label">Email address</label>

                            <div class="col-md-12 js-form-message">
                                <input type="email" name="EmailAddress" class="form-control emailValidation" id="txtEmail" placeholder="Enter and email address" aria-label="Enter an email address" required data-msg="Please enter a email address" />
                            </div>
                        </div>
                        <!-- End Form Group -->
                        <input type="hidden" name="quoteId" value="@Model.VendorQuoteModel.Quote.QuoteID" />
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-white" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Send</button>
                    </div>
                </div>
            </form>
        </div>
    </div>


</main>


@section scripts{
    <script>
        $(document).on('ready', function () {
            // INITIALIZATION OF FORM VALIDATION
            // =======================================================
            $('.js-validate').each(function () {
                $.HSCore.components.HSValidation.init($(this));
            });
        });

    </script>
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyBter9Tb9YQMPbNN7DJAqJWo5lFx00uALg"></script>
    <script type="text/javascript">
                    var markerReceiver = [@Model.VendorQuoteModel.Quote.RecLatitude, @Model.VendorQuoteModel.Quote.RecLongitude];
                    window.onload = function () {
                        var mapOptions = {
                            center: new google.maps.LatLng(-30.5879375, 23.5053125),
                            zoom: 6,
                            mapTypeId: google.maps.MapTypeId.ROADMAP
                        };
                        const geocoder = new google.maps.Geocoder();
                        const receiverinfowindow = new google.maps.InfoWindow();
                        const senderinfowindow = new google.maps.InfoWindow();
                        var map = new google.maps.Map(document.getElementById("dvMap"), mapOptions);
                        geocodeReceiversLatLng(geocoder, map, receiverinfowindow);
                        geocodeSendersLatLng(geocoder, map, senderinfowindow);
                        function geocodeReceiversLatLng(geocoder, map, receiverinfowindow)
                        {
                            const latlng = {
                                lat: @Html.Raw(Model.VendorQuoteModel.Quote.RecLatitude),
                                lng: @Html.Raw(Model.VendorQuoteModel.Quote.RecLongitude),
                            };
                            geocoder.geocode({ location: latlng }, (results, status) =>
                            {
                                if (status === "OK")
                                {
                                        const marker = new google.maps.Marker({
                                            position: latlng,
                                            map: map,
                                        });
                                    receiverinfowindow.setContent("Receiver"+" "+"@Html.Raw(Model.VendorQuoteModel.Quote.RecAdd1)");                                    
                                    marker.addListener("click", () => {
                                        receiverinfowindow.open(map, marker);
                                    });
                                    google.maps.event.addListener(marker, 'click', function () {
                                        map.panTo(this.getPosition());
                                        map.setZoom(17);
                                    });
                                } else {
                                    window.alert("Geocoder failed due to: " + status);
                                }
                            });

                        }
                        function geocodeSendersLatLng(geocoder, map, senderinfowindow)
                        {
                            const latlng = {
                                lat: @Html.Raw(Model.VendorQuoteModel.Quote.SenLatitude),
                                lng: @Html.Raw(Model.VendorQuoteModel.Quote.SenLongitude),
                            };
                            geocoder.geocode({ location: latlng }, (results, status) =>
                            {
                                if (status === "OK")
                                {
                                        const marker = new google.maps.Marker({
                                            position: latlng,
                                            map: map,
                                        });
                                    senderinfowindow.setContent("Sender"+" "+"@Html.Raw(Model.VendorQuoteModel.Quote.SenAdd1)");                                  
                                    marker.addListener("click", () => {
                                        senderinfowindow.open(map, marker);
                                    });
                                    google.maps.event.addListener(marker, 'click', function () {
                                        map.panTo(this.getPosition());
                                        map.setZoom(17);
                                    });
                                } else {
                                    window.alert("Geocoder failed due to: " + status);
                                }
                            });

                        }
                    }
    </script>
}
